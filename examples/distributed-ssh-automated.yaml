# Distributed testing with automated SSH deployment (v0.6.11+)
#
# Prerequisites:
# 1. Run SSH setup once: sai3bench-ctl ssh-setup --hosts vm1.example.com,vm2.example.com
# 2. Docker installed on all VMs
# 3. Network connectivity between controller and agents
#
# This config enables zero-touch deployment:
# - Controller SSH's to each VM
# - Starts agent containers automatically
# - Runs coordinated workload
# - Cleans up containers after test

target: "s3://my-benchmark-bucket/data/"
duration: 60s
concurrency: 64

# Distributed configuration with SSH automation
distributed:
  # Agent definitions with per-agent customization
  agents:
    # Agent 1: Default config, uses base target
    - address: "vm1.example.com"
      id: "reader-1"
      env:
        AWS_PROFILE: "benchmark-reader"
        RUST_LOG: "info"
    
    # Agent 2: Override to different bucket for isolation
    - address: "vm2.example.com"
      id: "writer-1"
      target_override: "s3://benchmark-bucket-2/data/"
      env:
        AWS_PROFILE: "benchmark-writer"
      concurrency_override: 128  # More powerful VM
    
    # Agent 3: Local storage testing
    - address: "vm3.example.com"
      id: "local-nvme"
      target_override: "file:///mnt/nvme/benchmark/"
      volumes:
        - "/mnt/nvme:/mnt/nvme"  # Mount local storage
      env:
        RUST_LOG: "debug"
  
  # SSH configuration
  ssh:
    enabled: true
    user: "ubuntu"  # SSH user for all VMs
    key_path: "~/.ssh/sai3bench_id_rsa"  # Generated by ssh-setup command
    timeout: 10  # Connection timeout in seconds
  
  # Container deployment settings
  deployment:
    deploy_type: "docker"
    container_runtime: "docker"  # or "podman" for rootless containers
    image: "sai3bench:v0.6.11"  # Your container image
    network_mode: "host"  # Required for gRPC communication
    pull_policy: "if_not_present"  # or "always" to force pull
  
  # Coordination settings
  start_delay: 2  # Seconds to wait before coordinated start
  path_template: "agent-{id}/"  # Path isolation for file:// backends
  
  # Directory tree and contention control (v0.7.0+)
  shared_filesystem: true  # S3 is shared across all agents
  tree_creation_mode: coordinator  # Controller creates tree once
  path_selection: partitioned  # Agents prefer different directories
  partition_overlap: 0.2  # 20% chance to access other partitions

# Pre-populate test data (runs once on shared storage)
prepare:
  ensure_objects:
    - base_uri: "s3://my-benchmark-bucket/data/"
      count: 1000
      size_distribution:
        type: lognormal
        mean: 1048576  # 1 MiB average
        std_dev: 524288  # 512 KiB std dev
        min: 1024  # 1 KiB min
        max: 10485760  # 10 MiB max
      fill: random
  post_prepare_delay: 3  # Wait for eventual consistency

# Mixed workload
workload:
  - op: get
    path: "data/*"
    weight: 70
    concurrency: 64
  
  - op: put
    path: "uploads/"
    weight: 20
    size_distribution:
      type: uniform
      min: 1024
      max: 1048576
  
  - op: list
    path: "data/"
    weight: 5
  
  - op: delete
    path: "uploads/*"
    weight: 5

# Usage:
# 1. First-time setup (once):
#    sai3bench-ctl ssh-setup --hosts ubuntu@vm1.example.com,ubuntu@vm2.example.com,ubuntu@vm3.example.com
#
# 2. Run distributed test (automated deployment):
#    sai3bench-ctl run --config examples/distributed-ssh-automated.yaml
#
# 3. Controller will:
#    - SSH to each VM
#    - Pull Docker image sai3bench:v0.6.11
#    - Start agent containers with --net=host
#    - Apply per-agent overrides (target, env vars, volumes)
#    - Coordinate workload execution
#    - Collect and merge results
#    - Stop and cleanup containers
#
# Results saved to: sai3-YYYYMMDD-HHMM-distributed-ssh-automated/
